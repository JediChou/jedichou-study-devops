#####################################################################
# File name: tc_Struct.rb
# Create date: 2013-9-29 16:57 PM
# Update date: 2013-9-29 17:08 PM
# Description: Cross write unit test to study build-in classes
#####################################################################
# Author  : Jedi Chou
# From    : Programming Ruby 1.9 & 2.0
#           The Pragmatic Programmers' Guide
# ISBN-13 : 978-1-93778-549-9
#####################################################################

require 'test/unit'

class TC_Struct < Test::Unit::TestCase

	# From the page 694
	# -----------------------------------------------------------------
	#       Struct.new(<string><,symbol>+) -> Customer
	# Struct.new(<string><,symbol>+) {...} -> Customer
	# -----------------------------------------------------------------
	def test_Struct_ClassMethods_new
		result = Customer_New1.new("Dave", "123 Main").to_s
		assert_equal("Dave lives at 123 Main", result)
	end

	# From the page 694
	# ------------------------------------------------------------------
	# Customer.new(<obj>+) -> joe
	# ------------------------------------------------------------------
	# Create a new instance of structer (the class by Struct.new). the
	# number of actual parameters must be less than or equal to the
	# number of attributes defined for this class; unset parameters
	# default to nil. Passing too many parameters will raise an
	# ArgumentError.
	def test_Struct_ClassMethods_new2
		joe = Customer_New2.new("Joe Smith", "123 Maple, Anytown NC", 12345)
		assert_equal("Joe Smith", joe.name)
		assert_equal("123 Maple, Anytown NC", joe.address)
		assert_equal(12345, joe.zip)
	end

	# From the page 694
	# ------------------------------------------------------------------
	# Customer[<obj>+] -> joe
	# ------------------------------------------------------------------
	# Synonym for new (for the generated structure).
	def test_Struct_ClassMethods_new3
		joe = Customer_New2["Joe Smith", "123 Maple, Anytown NC", 12345]
		assert_equal("Joe Smith", joe.name)
		assert_equal("123 Maple, Anytown NC", joe.address)
		assert_equal(12345, joe.zip)
	end

	# From the page 694
	# ------------------------------------------------------------------
	# Customer.members -> array
	# ------------------------------------------------------------------
	# Returns an array of symbols representing the names of the instance
	# variables.
	def test_Struct_ClassMethods_members
		assert_equal([:name, :address, :zip], Customer_New2.members)
	end

	# From the page 694
	# ------------------------------------------------------------------
	# joe == other_struct -> true of false
	# ------------------------------------------------------------------
	# Equality - Returns true if other_struct is equal to this one: they
	# must be of the same class as generated by Struct.new, and the values
	# of all instance variables must be equal (according to Object#==).
	def test_Struct_InstanceMethods_Equality
		joe   = Customer_New2.new("Joe Smith", "123 Maple, Anytown NC", 12345)
		joejr = Customer_New2.new("Joe Smith", "123 Maple, Anytown NC", 12345)
		jane  = Customer_New2.new("Joe Smith", "456 Elm, Anytown NC", 12345)

		assert_equal(true,  joe == joejr)
		assert_equal(false, joe == jane)
	end

	# From the page 695
	# ------------------------------------------------------------------
	#  joe[symbol] -> obj
	# joe[integer] -> obj
	# ------------------------------------------------------------------
	# Attribute Reference - Returns the value of the instance variable
	# named by symbol or indexed (0..length-1) by int. Raises NameError
	# if named variable does not exist or raises IndexError if the index
	# is out of range.
	def test_Struct_InstanceMethods_joe
		joe = Customer_New2.new("Joe Smith", "123 Maple, Anytown NC", 12345)
		assert_equal("Joe Smith", joe["name"])
		assert_equal("Joe Smith", joe[:name])
		assert_equal("Joe Smith", joe[0])
	end

	# From the page 695
	# ------------------------------------------------------------------
	# joe[symbol] = obj -> obj
	#    joe[int] = obj -> obj
	# ------------------------------------------------------------------
	# Attribute Assignment - Assign to the instance variable named by
	# symbol or int the value obj and returns it. Raises a NameError if
	# the named variable does not exist or raises an IndexError if the
	# index is out of range.
	def test_Struct_InstanceMethods_AttributeAssignment
		joe = Customer_New2.new("Joe Smith", "123 Maple, Anytown NC", 12345)
		joe["name"] = "Luke"
		joe[:zip] = "90210"
		assert_equal("Luke",  joe[:name])
		assert_equal("90210", joe[:zip])
	end

	# From the page 695
	# ------------------------------------------------------------------
	# joe.each {|obj|...} -> joe
	# ------------------------------------------------------------------
	# Calls block once for each instance variable, passing the value
	# as a parameter.
	def test_Struct_InstanceMethods_each
		joe = Customer_New2.new(1,1,1)
		joe.each {|attr| assert_equal(1, attr)}
	end

	# From the page 696
	# ------------------------------------------------------------------
	# joe.each_pair {|symbol,obj|...} -> joe
	# ------------------------------------------------------------------
	# Calls block once for each instance variable, passing the name (as
	# a symbol) and the value as parameters.
	def test_Struct_InstanceMethods_each_pair
		joe = Customer_New2.new(1,1,1)
		joe_name  = []
		joe_value = []
		
		joe.each_pair {|name, value|
			joe_name.push(name)
			joe_value.push(value)
		}
		assert_equal([:name,:address,:zip], joe_name)
		assert_equal([1,1,1], joe_value)
	end

	# From the page 696
	# ------------------------------------------------------------------
	# joe.length -> int
	# ------------------------------------------------------------------
	# Returns the number of attributes.
	def test_Struct_InstanceMethods_length
		joe = Customer_New2.new(1,1,1)
		assert_equal(3, joe.length)
	end

	# From the page 696
	# ------------------------------------------------------------------
	# joe.members -> array
	# ------------------------------------------------------------------
	# Returns the names of the instance variables as an array of symbols.
	def test_Struct_InstanceMethods_member
		joe = Customer_New2.new(1,1,1)
		assert_equal([:name,:address,:zip], joe.members)
	end

	# From the page 696
	# ------------------------------------------------------------------
	# joe.size -> int
	# ------------------------------------------------------------------
	# Synonym for Struct#length.
	def test_Struct_InstanceMethods_size
		joe = Customer_New2.new(1,1,1)
		assert_equal(3, joe.size)
	end

	# From the page 696
	# ------------------------------------------------------------------
	# joe.to_a -> array
	# ------------------------------------------------------------------
	# Returns the values for this instance as an array.
	def test_Struct_InstanceMethods_to_a
		joe = Customer_New2.new(1,1,1)
		assert_equal([1,1,1], joe.to_a)
	end

	# From the page 696
	# ------------------------------------------------------------------
	# joe.to_h -> hash
	# ------------------------------------------------------------------
	# Returns a hash of key/values pairs in this struct.
	def test_Struct_InstanceMethods_to_h
		joe = Customer_New2.new(1,1,1)
		# assert_equal([:name=>1,:address=>1,:zip=>1], joe.to_h)
	end

	# From the page 696
	# ------------------------------------------------------------------
	# joe.values -> array
	# ------------------------------------------------------------------
	# Synonym for to_a.
	def test_Struct_InstanceMethods_values
		joe = Customer_New2.new(1,1,1)
		assert_equal([1,1,1], joe.values)
	end

	# From the page 696
	# ------------------------------------------------------------------
	# joe.values_at(<select>*) -> array
	# ------------------------------------------------------------------
	# Returns an array containing the elements in joe corresponding to
	# the given indices. The selectors may be integer indices or ranges.
	def test_Struct_InstanceMethods_values_at
		l = Lots.new(11,22,33,44,55,66)
		assert_equal([22,44,66], l.values_at(1,3,5))
		assert_equal([11,33,55], l.values_at(0,2,4))
		assert_equal([66,44,22], l.values_at(-1,-3,-5))
	end

end

# For test method -> test_Struct_ClassMethods_new
Customer_New1 = Struct.new(:name, :address) do
	def to_s
		"#{self.name} lives at #{self.address}"
	end
end

# For test method -> test_Struct_ClassMethods_new2
Customer_New2 = Struct.new(:name, :address, :zip)

# For test method -> test_Struct_InstanceMethods_values_at
Lots = Struct.new(:a,:b,:c,:d,:e,:f)
